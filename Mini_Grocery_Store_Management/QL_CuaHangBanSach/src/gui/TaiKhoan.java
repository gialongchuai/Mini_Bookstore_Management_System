/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dao.SQLServerProvider;
import static dao.SQLServerProvider.getConnection;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import dao.TaiKhoanDAO;

/**
 *
 * @author MSII
 */
public class TaiKhoan extends javax.swing.JFrame {

    /**
     * Creates new form TaiKhoan
     */
    public TaiKhoan() {
        initComponents();
        this.setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(255, 229, 229)); // màu cho form

        setButtonBackground(new java.awt.Color(190, 160, 190));

        // Thiết lập model cho bảng sản phẩm mua
        tblTaiKhoan.setModel(new TaiKhoan.NonEditableTableModel(new Object[][]{}, new String[]{
            "Mã người dùng", "Tên người dùng", "Email", "Số điện thoại", "Địa chỉ", "Tên đăng nhập", "Mật khẩu", "Vai trò"
        }));

        // Ngăn chặn chỉnh sửa các ô
        tblTaiKhoan.setDefaultEditor(Object.class, null);

        // Ngăn chặn chọn ô và double click
        tblTaiKhoan.setCellSelectionEnabled(false);
        tblTaiKhoan.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() > 1) {
                    e.consume(); // Không thực hiện hành động nào khi double click
                }
            }
        });

        loadDataToTable();
    }

    private void setButtonBackground(Color color) {
        Component[] components = getContentPane().getComponents();
        for (Component component : components) {
            if (component instanceof JButton) {
                JButton button = (JButton) component;
                button.setBackground(color);
            }
        }
    }

    // Lớp con của DefaultTableModel để ngăn chặn việc chỉnh sửa nội dung
    private class NonEditableTableModel extends DefaultTableModel {

        public NonEditableTableModel(Object[][] data, String[] columns) {
            super(data, columns);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Không cho phép chỉnh sửa
        }
    }

    // Hàm load dữ liệu từ cơ sở dữ liệu và hiển thị lên bảng
    private void loadDataToTable() {
        TaiKhoanDAO nguoiDungDAO = new TaiKhoanDAO();
        List<Object[]> users = nguoiDungDAO.getAllUsers();

        DefaultTableModel model = (DefaultTableModel) tblTaiKhoan.getModel();
        model.setRowCount(0);

        for (Object[] user : users) {
            // Thay đổi giá trị mật khẩu từ user[6] (cột MatKhau) thành dấu *
            String password = user[6].toString();
            StringBuilder hiddenPassword = new StringBuilder();
            for (int i = 0; i < password.length(); i++) {
                hiddenPassword.append("*");
            }
            user[6] = hiddenPassword.toString();
            model.addRow(user);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDanhMucSach = new javax.swing.JButton();
        btnSach = new javax.swing.JButton();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnLuu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDangXuat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTaiKhoan = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtTenNguoiDung = new javax.swing.JTextField();
        txtSoDienThoai = new javax.swing.JTextField();
        txtMaNguoiDung = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtTenDangNhap = new javax.swing.JTextField();
        txtMatKhau = new javax.swing.JTextField();
        cbxVaiTro = new javax.swing.JComboBox<>();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        btnLamMoiTxt = new javax.swing.JButton();
        btnTuDong = new javax.swing.JButton();
        btnHoaDon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDanhMucSach.setText("Danh mục sách");
        btnDanhMucSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDanhMucSachActionPerformed(evt);
            }
        });

        btnSach.setText("Sách");
        btnSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSachActionPerformed(evt);
            }
        });

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("TÀI KHOẢN");

        btnDangXuat.setText("Đăng xuât");
        btnDangXuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDangXuatActionPerformed(evt);
            }
        });

        tblTaiKhoan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblTaiKhoan);

        jLabel2.setText("Mã người dùng");

        jLabel3.setText("Tên người dùng");

        jLabel4.setText("Email");

        jLabel5.setText("Số điện thoại");

        jLabel6.setText("Địa chỉ");

        jLabel7.setText("Tên đăng nhập");

        jLabel8.setText("Mật khẩu");

        jLabel9.setText("Vai trò");

        txtTenNguoiDung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenNguoiDungActionPerformed(evt);
            }
        });

        txtSoDienThoai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoDienThoaiActionPerformed(evt);
            }
        });

        txtMaNguoiDung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaNguoiDungActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        txtDiaChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiaChiActionPerformed(evt);
            }
        });

        txtTenDangNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenDangNhapActionPerformed(evt);
            }
        });

        txtMatKhau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMatKhauActionPerformed(evt);
            }
        });

        cbxVaiTro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhân viên", "Quản trị viên" }));
        cbxVaiTro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxVaiTroActionPerformed(evt);
            }
        });

        txtTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemActionPerformed(evt);
            }
        });

        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        btnLamMoiTxt.setText("Làm mới");
        btnLamMoiTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiTxtActionPerformed(evt);
            }
        });

        btnTuDong.setText("Tự động");
        btnTuDong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTuDongActionPerformed(evt);
            }
        });

        btnHoaDon.setText("Hóa đơn");
        btnHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoaDonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSach)
                    .addComponent(btnDanhMucSach, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHoaDon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnXoa)
                                .addGap(26, 26, 26)
                                .addComponent(btnSua))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnLamMoiTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDangXuat, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnLuu)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel1)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSoDienThoai, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(txtMaNguoiDung, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(txtTenNguoiDung)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(txtTenDangNhap, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(txtMatKhau, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(cbxVaiTro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTuDong)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 772, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(btnTimKiem)
                                        .addGap(231, 231, 231)
                                        .addComponent(btnLamMoi)))
                                .addContainerGap(34, Short.MAX_VALUE))))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDanhMucSach, btnHoaDon, btnSach});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDangXuat, btnLuu, btnSua, btnThem, btnXoa});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnLamMoi, btnLamMoiTxt, btnTimKiem, btnTuDong});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnLamMoiTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMaNguoiDung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(btnTuDong))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenNguoiDung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDanhMucSach, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSoDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(btnSach)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTenDangNhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(btnHoaDon)))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxVaiTro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTimKiem)
                            .addComponent(btnLamMoi))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa)
                    .addComponent(btnSua)
                    .addComponent(btnLuu))
                .addGap(18, 18, 18)
                .addComponent(btnDangXuat, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDanhMucSach, btnHoaDon, btnSach});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDangXuat, btnLuu, btnSua, btnThem, btnXoa});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLamMoi, btnLamMoiTxt, btnTimKiem, btnTuDong});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDanhMucSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDanhMucSachActionPerformed
        // TODO add your handling code here:
        // Hiển thị hộp thoại xác nhận
        int choice = JOptionPane.showConfirmDialog(this, "Mở danh mục sách?", "Xác nhận đăng xuất", JOptionPane.YES_NO_OPTION);

        // Nếu người dùng chọn Yes
        if (choice == JOptionPane.YES_OPTION) {
            // Đóng form hiện tại
            this.dispose();

            // Mở form DangNhap
            DanhMucSach dangNhapForm = new DanhMucSach();
            dangNhapForm.setVisible(true);
        }
    }//GEN-LAST:event_btnDanhMucSachActionPerformed

    private void btnSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSachActionPerformed
        // TODO add your handling code here:
        // Hiển thị hộp thoại xác nhận
        int choice = JOptionPane.showConfirmDialog(this, "Mở tất cả sách?", "Xác nhận đăng xuất", JOptionPane.YES_NO_OPTION);

        // Nếu người dùng chọn Yes
        if (choice == JOptionPane.YES_OPTION) {
            // Đóng form hiện tại
            this.dispose();

            // Mở form DangNhap
            Sach dangNhapForm = new Sach();
            dangNhapForm.setVisible(true);
        }
    }//GEN-LAST:event_btnSachActionPerformed

    private void txtMaNguoiDungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaNguoiDungActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaNguoiDungActionPerformed

    private void txtTenNguoiDungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenNguoiDungActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenNguoiDungActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtSoDienThoaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoDienThoaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoDienThoaiActionPerformed

    private void txtDiaChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiaChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiaChiActionPerformed

    private void txtTenDangNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenDangNhapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenDangNhapActionPerformed

    private void txtMatKhauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMatKhauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMatKhauActionPerformed

    private void cbxVaiTroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxVaiTroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxVaiTroActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
        // Kiểm tra xem các trường dữ liệu có được điền đầy đủ không
        if (txtMaNguoiDung.getText().isEmpty()
                || txtTenNguoiDung.getText().isEmpty()
                || txtEmail.getText().isEmpty()
                || txtSoDienThoai.getText().isEmpty()
                || txtDiaChi.getText().isEmpty()
                || txtTenDangNhap.getText().isEmpty()
                || txtMatKhau.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin tài khoản!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có muốn thêm mới tài khoản này?", "Xác nhận", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                Connection connection = SQLServerProvider.getConnection();

                // Kiểm tra mã người dùng đã tồn tại hay chưa
                String maNguoiDung = txtMaNguoiDung.getText();
                if (TaiKhoanDAO.checkMaNguoiDungExists(connection, maNguoiDung)) {
                    JOptionPane.showMessageDialog(this, "Mã người dùng đã tồn tại!");
                    return;
                }

                // Kiểm tra email đã tồn tại hay chưa
                String email = txtEmail.getText();
                if (TaiKhoanDAO.checkEmailExists(connection, email)) {
                    JOptionPane.showMessageDialog(this, "Email đã tồn tại!");
                    return;
                }

                // Kiểm tra số điện thoại có phải là số nguyên không
                if (!isInteger(txtSoDienThoai.getText())) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại phải là số nguyên!");
                    return;
                }

                // Kiểm tra số điện thoại đã tồn tại hay chưa
                String soDienThoai = txtSoDienThoai.getText();
                if (TaiKhoanDAO.checkSoDienThoaiExists(connection, soDienThoai)) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại!");
                    return;
                }

                // Kiểm tra tên đăng nhập đã tồn tại hay chưa
                String tenDangNhap = txtTenDangNhap.getText();
                if (TaiKhoanDAO.checkTenDangNhapExists(connection, tenDangNhap)) {
                    JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại!");
                    return;
                }

                // Lấy giá trị của ComboBox cbxVaiTro
                String vaiTro = cbxVaiTro.getSelectedItem().toString();

                // Thêm dữ liệu vào cơ sở dữ liệu
                if (TaiKhoanDAO.insertNguoiDung(connection, maNguoiDung, txtTenNguoiDung.getText(), email, soDienThoai, txtDiaChi.getText(), tenDangNhap, txtMatKhau.getText(), vaiTro)) {
                    JOptionPane.showMessageDialog(this, "Thêm người dùng thành công!");
                    loadDataToTable();
                    clearFields();
                } else {
                    JOptionPane.showMessageDialog(this, "Thêm người dùng thất bại!");
                }

                connection.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Thêm người dùng thất bại!");
            }
        }
    }//GEN-LAST:event_btnThemActionPerformed

    private boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        // Kiểm tra các trường dữ liệu trước khi xóa
        if (txtMaNguoiDung.getText().isEmpty()
                || txtTenNguoiDung.getText().isEmpty()
                || txtEmail.getText().isEmpty()
                || txtSoDienThoai.getText().isEmpty()
                || txtDiaChi.getText().isEmpty()
                || txtTenDangNhap.getText().isEmpty()
                || txtMatKhau.getText().isEmpty()) {

            // Nếu một trong các trường trống, thông báo yêu cầu chọn một dòng dữ liệu từ bảng để xóa
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng tài khoản từ bảng để xóa!");
        } else {
            // Nếu các trường dữ liệu không trống, hiển thị hộp thoại xác nhận xóa
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa người dùng này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Nếu người dùng đồng ý xóa, lấy mã người dùng từ txtMaNguoiDung
                int maNguoiDung = Integer.parseInt(txtMaNguoiDung.getText());

                // Thực hiện xóa dòng từ cơ sở dữ liệu dựa vào mã người dùng
                boolean success = xoaNguoiDung(maNguoiDung);

                if (success) {
                    // Nếu xóa thành công, thông báo thành công
                    JOptionPane.showMessageDialog(this, "Xóa người dùng thành công!");
                    loadDataToTable();
                    clearFields();
                } else {
                    // Nếu xóa không thành công, thông báo lỗi
                    JOptionPane.showMessageDialog(this, "Xóa người dùng không thành công do xung đột dữ liệu!");
                }
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    // Phương thức thực hiện xóa người dùng từ cơ sở dữ liệu
    private boolean xoaNguoiDung(int maNguoiDung) {
        boolean success = false;
        Connection connection = SQLServerProvider.getConnection();

        if (connection != null) {
            try {
                // Sử dụng PreparedStatement để thực hiện xóa dữ liệu dựa vào mã người dùng
                String sql = "DELETE FROM NguoiDung WHERE MaNguoiDung = ?";
                PreparedStatement statement = connection.prepareStatement(sql);
                statement.setInt(1, maNguoiDung);

                // Thực thi câu lệnh xóa
                int rowsAffected = statement.executeUpdate();

                // Nếu có ít nhất một dòng bị ảnh hưởng, xóa thành công
                if (rowsAffected > 0) {
                    success = true;
                }

                // Đóng kết nối và tài nguyên
                statement.close();
                connection.close();
            } catch (SQLException e) {
                System.out.println("Lỗi khi thực hiện xóa người dùng: " + e.getMessage());
            }
        }

        return success;
    }

    // Biến để lưu giá trị MaNguoiDung từ cơ sở dữ liệu
    private String txtMaNguoiDungDB;
    private String txtTenDangNhapDB;


    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        // Kiểm tra xem có hàng nào được chọn không
        int selectedRow = tblTaiKhoan.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một tài khoản từ bảng để sửa!");
            return;
        }

        // Lấy thông tin của hàng được chọn
        DefaultTableModel model = (DefaultTableModel) tblTaiKhoan.getModel();
        String maNguoiDung = model.getValueAt(selectedRow, 0).toString();
        String tenNguoiDung = model.getValueAt(selectedRow, 1).toString();
        String email = model.getValueAt(selectedRow, 2).toString();
        String soDienThoai = model.getValueAt(selectedRow, 3).toString();
        String diaChi = model.getValueAt(selectedRow, 4).toString();
        String tenDangNhap = model.getValueAt(selectedRow, 5).toString();
        String matKhau = model.getValueAt(selectedRow, 6).toString();

        // Gán giá trị của mã người dùng vào biến selectedMaNguoiDung
        txtMaNguoiDungDB = maNguoiDung;
        txtTenDangNhapDB = tenDangNhap;

        // Hiển thị thông tin lên các ô txt
        txtMaNguoiDung.setText(maNguoiDung);
        txtTenNguoiDung.setText(tenNguoiDung);
        txtEmail.setText(email);
        txtSoDienThoai.setText(soDienThoai);
        txtDiaChi.setText(diaChi);
        txtTenDangNhap.setText(tenDangNhap);
        txtMatKhau.setText(matKhau);

        // Thêm mã người dùng vào để truy vấn vai trò
        hienThiVaiTroCuaNguoiDung(maNguoiDung);
    }//GEN-LAST:event_btnSuaActionPerformed

    private void hienThiVaiTroCuaNguoiDung(String maNguoiDung) {
        try {
            // Kết nối đến cơ sở dữ liệu bằng cách sử dụng lớp SQLServerProvider từ package dao
            Connection conn = SQLServerProvider.getConnection();

            // Truy vấn để lấy vai trò của người dùng dựa trên mã người dùng
            String query = "SELECT VaiTro FROM NguoiDung WHERE MaNguoiDung = ?";
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setString(1, maNguoiDung);
            ResultSet rs = pst.executeQuery();

            // Nếu có kết quả trả về, cập nhật giá trị của cbxVaiTro
            if (rs.next()) {
                String vaiTro = rs.getString("VaiTro");
                cbxVaiTro.setSelectedItem(vaiTro);
            }

            // Đóng kết nối và tài nguyên
            rs.close();
            pst.close();
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tải vai trò của người dùng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        // TODO add your handling code here:
        updateDataToDatabase();
    }//GEN-LAST:event_btnLuuActionPerformed

    // Hàm kiểm tra dữ liệu có được nhập đầy đủ hay không
    private boolean isDataValid() {
        return !(txtMaNguoiDung.getText().isEmpty()
                || txtTenNguoiDung.getText().isEmpty()
                || txtEmail.getText().isEmpty()
                || txtSoDienThoai.getText().isEmpty()
                || txtDiaChi.getText().isEmpty()
                || txtTenDangNhap.getText().isEmpty());
    }

    // Hàm cập nhật dữ liệu vào cơ sở dữ liệu
    private void updateDataToDatabase() {
        if (isDataValid()) {
            try (Connection connection = SQLServerProvider.getConnection()) {
                // Kiểm tra nếu người dùng thay đổi txtMaNguoiDung
                if (!txtMaNguoiDung.getText().equals(txtMaNguoiDungDB)) {
                    JOptionPane.showMessageDialog(null, "Không thể thay đổi mã người dùng!");
                    return; // Kết thúc hàm nếu không thể thay đổi Mã Người Dùng
                }

                // Kiểm tra nếu người dùng thay đổi txtTenDangNhap
                if (!txtTenDangNhap.getText().equals(txtTenDangNhapDB)) {
                    String queryCheckDuplicate = "SELECT * FROM NguoiDung WHERE TenDangNhap=?";
                    PreparedStatement statementCheckDuplicate = connection.prepareStatement(queryCheckDuplicate);
                    statementCheckDuplicate.setString(1, txtTenDangNhap.getText());
                    ResultSet rs = statementCheckDuplicate.executeQuery();
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(null, "Tên đăng nhập đã tồn tại!");
                        return; // Kết thúc hàm nếu tên đăng nhập đã tồn tại
                    }
                }

                // Kiểm tra nếu người dùng nhập txtSoDienThoai là số nguyên
                try {
                    Integer.parseInt(txtSoDienThoai.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Số điện thoại phải là số nguyên!");
                    return; // Kết thúc hàm nếu số điện thoại không phải là số nguyên
                }

                // Cập nhật dữ liệu vào cơ sở dữ liệu
                String query = "UPDATE NguoiDung SET TenNguoiDung=?, Email=?, SoDienThoai=?, DiaChi=?, TenDangNhap=?, MatKhau=?, VaiTro=? WHERE MaNguoiDung=?";
                PreparedStatement statement = connection.prepareStatement(query);
                statement.setString(1, txtTenNguoiDung.getText());
                statement.setString(2, txtEmail.getText());
                statement.setString(3, txtSoDienThoai.getText());
                statement.setString(4, txtDiaChi.getText());
                statement.setString(5, txtTenDangNhap.getText());
                statement.setString(6, txtMatKhau.getText()); // Lấy mật khẩu từ txtMatKhau
                statement.setString(7, cbxVaiTro.getSelectedItem().toString()); // Lấy vai trò từ cbxVaiTro
                statement.setString(8, txtMaNguoiDung.getText());

                int rowsAffected = statement.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Cập nhật dữ liệu thành công!");
                    loadDataToTable(); // Gọi hàm để load lại dữ liệu vào bảng
                    clearFields(); // Làm trống các ô nhập liệu
                } else {
                    JOptionPane.showMessageDialog(null, "Không thể cập nhật dữ liệu.");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Lỗi khi cập nhật dữ liệu: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin người dùng!");
        }
    }

    // Hàm để làm trống các ô nhập liệu
    private void clearFields() {
        txtMaNguoiDung.setText("");
        txtTenNguoiDung.setText("");
        txtEmail.setText("");
        txtSoDienThoai.setText("");
        txtDiaChi.setText("");
        txtTenDangNhap.setText("");
        txtMatKhau.setText("");
    }

    private void btnDangXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDangXuatActionPerformed
        // TODO add your handling code here:
        // Hiển thị hộp thoại xác nhận
        int choice = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn đăng xuất?", "Xác nhận đăng xuất", JOptionPane.YES_NO_OPTION);

        // Nếu người dùng chọn Yes
        if (choice == JOptionPane.YES_OPTION) {
            // Đóng form hiện tại
            this.dispose();

            // Mở form DangNhap
            DangNhap dangNhapForm = new DangNhap();
            dangNhapForm.setVisible(true);
        }
    }//GEN-LAST:event_btnDangXuatActionPerformed

    private void txtTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        String searchText = txtTimKiem.getText().trim();
        if (!searchText.isEmpty()) {
            Connection connection = SQLServerProvider.getConnection();
            if (connection != null) {
                String query = "SELECT MaNguoiDung AS 'Mã người dùng', TenNguoiDung AS 'Tên người dùng', Email, "
                        + "SoDienThoai AS 'Số điện thoại', DiaChi AS 'Địa chỉ', TenDangNhap AS 'Tên đăng nhập', "
                        + "REPLACE(MatKhau, SUBSTRING(MatKhau, 2, LEN(MatKhau) - 1), REPLICATE('*', LEN(MatKhau) - 1)) AS 'Mật khẩu', "
                        + "VaiTro AS 'Vai trò' "
                        + "FROM NguoiDung "
                        + "WHERE TenNguoiDung LIKE ? OR Email LIKE ? OR SoDienThoai LIKE ? OR DiaChi LIKE ? OR VaiTro LIKE ?";
                try {
                    PreparedStatement ps = connection.prepareStatement(query);
                    for (int i = 1; i <= 5; i++) {
                        ps.setString(i, "%" + searchText + "%");
                    }
                    ResultSet rs = ps.executeQuery();

                    DefaultTableModel model = (DefaultTableModel) tblTaiKhoan.getModel();
                    model.setRowCount(0);

                    while (rs.next()) {
                        Object[] row = new Object[8];
                        row[0] = rs.getInt("Mã người dùng");
                        row[1] = rs.getString("Tên người dùng");
                        row[2] = rs.getString("Email");
                        row[3] = rs.getString("Số điện thoại");
                        row[4] = rs.getString("Địa chỉ");
                        row[5] = rs.getString("Tên đăng nhập");
                        row[6] = rs.getString("Mật khẩu");
                        row[7] = rs.getString("Vai trò");

                        model.addRow(row);
                    }

                    connection.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm dữ liệu từ cơ sở dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khóa tìm kiếm", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiActionPerformed
        // TODO add your handling code here:
        loadDataToTable();
        txtTimKiem.setText("");

    }//GEN-LAST:event_btnLamMoiActionPerformed

    private void btnLamMoiTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLamMoiTxtActionPerformed
        // TODO add your handling code here:
        // Xóa nội dung của các ô txt
        txtMaNguoiDung.setText("");
        txtTenNguoiDung.setText("");
        txtEmail.setText("");
        txtSoDienThoai.setText("");
        txtDiaChi.setText("");
        txtTenDangNhap.setText("");
        txtMatKhau.setText("");
    }//GEN-LAST:event_btnLamMoiTxtActionPerformed

    private void btnTuDongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTuDongActionPerformed
        // TODO add your handling code here:
        try {
            // Kết nối đến cơ sở dữ liệu bằng cách sử dụng lớp SQLServerProvider từ package dao
            Connection conn = SQLServerProvider.getConnection();

            // Truy vấn để lấy tất cả các số đã được sử dụng trong cột MaNguoiDung của bảng NguoiDung
            String query = "SELECT MaNguoiDung FROM NguoiDung";
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();

            // Tạo một danh sách để lưu trữ các số đã được sử dụng
            List<Integer> usedNumbers = new ArrayList<>();
            while (rs.next()) {
                usedNumbers.add(rs.getInt("MaNguoiDung"));
            }

            // Kiểm tra từng số từ 1 đến vô cùng
            int newNumber = 1;
            while (true) {
                // Nếu số hiện tại chưa được sử dụng, gán vào txtMaNguoiDung và kết thúc quá trình
                if (!usedNumbers.contains(newNumber)) {
                    txtMaNguoiDung.setText(Integer.toString(newNumber));
                    break;
                }
                newNumber++;
            }

            // Đóng kết nối và tài nguyên
            rs.close();
            pst.close();
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tự động điền số vào txtMaNguoiDung.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnTuDongActionPerformed

    private void btnHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoaDonActionPerformed
        // TODO add your handling code here:
        // Hiển thị hộp thoại xác nhận
        int choice = JOptionPane.showConfirmDialog(this, "Mở hóa đơn sách?", "Xác nhận đăng xuất", JOptionPane.YES_NO_OPTION);

        // Nếu người dùng chọn Yes
        if (choice == JOptionPane.YES_OPTION) {
            // Đóng form hiện tại
            this.dispose();

            // Mở form DangNhap
            HoaDon dangNhapForm = new HoaDon();
            dangNhapForm.setVisible(true);
        }
    }//GEN-LAST:event_btnHoaDonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaiKhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaiKhoan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDangXuat;
    private javax.swing.JButton btnDanhMucSach;
    private javax.swing.JButton btnHoaDon;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnLamMoiTxt;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnSach;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnTuDong;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbxVaiTro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTaiKhoan;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMaNguoiDung;
    private javax.swing.JTextField txtMatKhau;
    private javax.swing.JTextField txtSoDienThoai;
    private javax.swing.JTextField txtTenDangNhap;
    private javax.swing.JTextField txtTenNguoiDung;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
}
